import type { GetServerSideProps } from "next";
import { useEffect, useState } from "react";
import Head from "next/head";
import FlightList, { LAUNCHES_QUERY } from "../components/FlightList";
import { Launch } from "../types/FlightListTypes";
import Layout from "../components/Layout";
import { useQuery } from "@apollo/client";
import { initializeApollo, addApolloState } from "../lib/apolloClient";

interface FlightListPageProps {
  initialLaunches: Launch[];
  initialPage: number;
  initialPerPage: number;
  initialSearch: string;
}

const FlightListPage = ({
  initialPage,
  initialPerPage,
  initialSearch,
}: FlightListPageProps) => {
  const [page, setPage] = useState(initialPage);
  const [perPage, setPerPage] = useState(initialPerPage);
  const [searchValue, setSearchValue] = useState(initialSearch);

  const [isFirstRender, setIsFirstRender] = useState(true);

  const { loading, error, data, refetch, networkStatus } = useQuery(
    LAUNCHES_QUERY,
    {
      variables: {
        limit: perPage,
        offset: page * perPage,
        find: searchValue,
      },
      notifyOnNetworkStatusChange: true,
    }
  );

  useEffect(() => {
    if (isFirstRender) {
      setIsFirstRender(false);

      return;
    }
    refetch({
      limit: perPage,
      offset: page * perPage,
      find: searchValue,
    });
  }, [page, perPage, searchValue]);

  const fetchNextPage = (page: number, perPage: number) => {
    refetch({
      limit: perPage,
      offset: page * perPage,
      find: searchValue,
    });
  };

  const handleSearchClick = () => {
    refetch({
      limit: perPage,
      offset: page * perPage,
      find: searchValue,
    });
  };

  const paginationProps = {
    page,
    perPage,
    setPage,
    setPerPage,
  };

  const searchProps = {
    searchValue,
    setSearchValue,
    handleSearchClick,
  };

  return (
    <>
      <Head>
        <title>SpaceX Launches - list</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <FlightList
          launches={data.launches}
          {...paginationProps}
          {...searchProps}
          isLoading={loading}
          fetchNextPage={fetchNextPage}
        />
      </Layout>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const apolloClient = initializeApollo();

  const initialPage = Number(query.page) || 0;
  const initialPerPage = Number(query.perPage) || 10;
  const initialSearch = query.search || "";

  const queryVariables = {
    limit: initialPerPage,
    offset: initialPage * initialPerPage,
    find: initialSearch,
  };

  const { data } = await apolloClient.query({
    query: LAUNCHES_QUERY,
    variables: queryVariables,
  });

  return addApolloState(apolloClient, {
    props: {
      initialLaunches: data.launches,
      initialPage,
      initialPerPage,
      initialSearch,
    },
  });
};

export default FlightListPage;
